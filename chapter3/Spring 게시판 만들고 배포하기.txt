.properties 와 .yaml 의 차이점 :
.yaml : 모든 데이터를 리스트, 해쉬, 스칼라 데이터의 조합으로 적절히 표현할 수 있다는 믿음을 가지고 만들어졌다.
장점 :
- 가독성이 좋다.
계층구조로 표현하여 가독성이 좋다. 또한 불필요한 소스의 중복도 제거 할 수 있다. 들여쓰기, 띄어쓰기로 구분하여 보기 편하다. 
- 리스트 표현
여러 줄에 쓸 때에는 하이픈(-)으로 시작하는 한 줄에 하나의 요소를 표현한다. 또한 한 줄에 모아 쓸 때에는 대괄호([])를 이용하며 쉼표로 각 요소를 구분한다.

단점:
- @PropertySource 어노테이션으로 프로퍼티 값을 불러 올 수 없다.

.properties : application.{profile}.properties 형식으로 여러개의 파일을 생성해서 사용한다.

궁금증 : docker를 run해서 image를 만들어줘야만 postgresql 을 사용할 수 있는 이유?

volume : 컨테이너 안에서 사용하고 있는 저장공간을 호스트 OS랑 공유하는 기능

profile : properties의 경우 세팅하나당 하나의 properties를 만들지만, yaml의 경우 active로 이름을 설정하여 실행할 수 있다. 기본값은 active=default이다.
ex) java -jar -Dspring.profiles.active=default  ./kk-0.0.1-SNAPSHOT.jar
    java -jar -Dspring.profiles.active=dev  ./kk-0.0.1-SNAPSHOT.jar