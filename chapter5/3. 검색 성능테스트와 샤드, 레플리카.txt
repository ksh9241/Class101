- ES와 비슷한 솔루션
Kibana
ES와 Kibana의 조합은 분석에 굉장히 널리 사용되는 조합이다.

- reindex(리인덱스)
ElasticSearch에서 지원해주는 API로 ip:port/_reindex로 url을 호출해준 뒤 바디값을 아래처럼 입력
{
	"source" : {"index"(ES-head) :"post" (ES-head의 index명)}
	,"dest" : {"index":"post_shard_8" (새로 조회할 때 사용할 index)}
}

이후 jenkins에서 배포 진행

샤드와 노드의 개수를 늘리면 Elasticsearch의 성능이 증가된다. 하지만 노드는 그대로 두고 샤드만 올릴경우 노드의 자원을 공유하기 때문에 일정 샤드 이상 올려봐도 자원 분배의 한계때문에 일정 성능 이상 상승을 하지 않는다. 오히려 샤드의 개수가 너무 많아지면 성능의 저하가 올 수 도 있다.

레플리카를 사용할 경우 노드별로 나누어서 다른 노드가 담당하는 샤드를 갖는다.
ex) 노드가 4개고 샤드가 8개 레플리카가 1개 있을 때 각 노드가 담당하는 샤드는 4개가 된다.
    노드가 4개고 샤드가 8개 레플리카가 0개 있을때는 각 노드가 담당하는 샤드는 2개가 된다. (이 때 노드가 죽게되면 그 노드가 담당하는 샤드 사용 불가)


- 결론 
ES를 사용했을 때 샤드를 하나만 사용하는 경우 노드의 개수가 많아도 하나의 샤드에 문서 전체의 데이터가 들어있기 때문에 DB보다 성능이 안좋을 수도 있다.
ES를 사용했을 때 샤드를 노드의 개수보다 많이 사용했을 때 DB보다 약 50%의 성능 향상이 이루어진다. ( 테스트 후 평균값 pc별 차이가 있을 수 있음.)
ES를 사용했고 샤드를 노드의 개수보다 많이 사용하며, 레플리카를 사용했을 때 DB와 성능이 비슷하다.

