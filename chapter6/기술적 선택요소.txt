- 기술적 선택 요소

- 클라우드 서비스 선택
* 고려사항 : 서비스를 클라우드로 제공할지 아니면 온프레미스로 제공할지 
(사업규모와 트레픽에 따라서 온프레미스가 필요한 경우도 있지만 대부분 클라우드 서비스를 이용)
클라우드 : 클라우스 서비스를 이용하여 서비스를 제공하는 것
	 서버 구입비 없음, 사용한 만큼 과금
	 물리적으로 인프라를 관리할 필요 없음.
	 트래픽에 맞게 자동으로 Scale-out 가능
	 추가 서버 필요시 쉽게 추가 가능

온프레미스 : 독자적으로 물리 서버를 구입하여 서버를 설치, 관리하는 것
	 초기 서버 구입비로 비용 많이 필요
	 인프라 관리 인력 필요 (물리적으로도 관리 필요)
	 Peak의 트래픽을 감당하기 위해 평소 불필요한 서버를 준비해야 함
	 추가 서버 필요시 발주-> 공급 -> 설치로 확장성 낮음

클라우드 3대장
1. aws
2. azure
3. gcp

- Hash 연산
CPU Bound Application에서는 Hash 연산을 매우 많이 해야할 경우 물리적인 회로로 처리하는 것도 고려해볼만하다. 물리적인 회로가 범용적인 CPU 보다 빠른 경우가 많다.

- 스트레스 테스트 툴
artillery (JavaScript)
nGrinder (Java)
Locust (Python)

- CI/CD (배포 툴)
jenkins
gitlab
Bamboo
TeamCity

- 배포방식
1. 롤링배포 : 인스턴스를 하나씩 배포하는 방법
2. 블루그린 : 이전 버전을 블루, 개발한 버전을 그린으로 이전 서버의 동일한 수만큼 새로 개발한 버전을 서버로 새로 만든 뒤 그린 서버가 준비가 완료되면 로드밸런서에서 새로운 버전으로 라우팅 되도록 변경한다.
	- 장점 : 이전버전과 새로운 버전이 공존하지 않는다. (모든 사용자가 동일하게 새로운 버전을 경험할 수 있다.)
	- 단점 : 서버의 구축 비용이 두배로 들어간다. 추가로 모든 트래픽이 새로운 버전으로 라우팅되기 때문에 새로운 버전에 문제가 있을 시 사용자가 영향을 받는다.
3. 카나리 : 블루그린과 비슷하지만 이전버전과 이후버전이 공존하는 상태가 있다. 새로운 버전으로 인해 실패하는 요청이 생기는지 감지할 수 있다. 새로운 버전에서 실패요청이 있을경우 기존 버전으로 라우팅하여 사용자에게 영향을 주지 않는다.

- 로드밸런싱
1. Nginx
2. HaProxy

- 형상관리
1. git
2. svn

* 형상관리 GUI
3. sourcetree
4. githubDesktop

- Redis