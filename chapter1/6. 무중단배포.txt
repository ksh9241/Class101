중단 배포 과정 : 이전버전 애플리케이션을 종료시키고, 새로운 애플리케이션을 실행하고 새로운 버전 애플리케이션이 요청을 받을 준비가 될 때까지 서비스가 중단됩니다. 이렇게 서비스가 중단되는 시간을 다운타임(downtime)이라고 한다.

새로운버전을 시작하기전에 이전버전을 내려야 하는 이유 : 하나의 서버에서 하나의 포트를 동시에 서로 다른 애플리케이션이 사용하는 것이 불가능 하기 때문에 기존에 운영되는 애플리케이션을 서버에서 내리고 새로운 버전의  애플리케이션을 올린다.

무중단배포 : 배포를 중단없이 하는 것.

무중단 배포 시 필요한 것 (이론)
1. 변경 전 서버와 변경 후 서버를 모두 가진 상태여야 한다. (단점 : 2개이상의 동일한 서버를 가지고 있어야 하기 때문에 비용이 많이든다.)
2. 이 서버와 사용자간 다이렉트 연결 시 사용자는 두 서버의 ip주소를 모두 알아야 한다.
(젠킨스를 사용하여 클라이언트가 리버스 프록시에게 요청을하고 리버스프록시가 서버에게 요청을 전달한다.)

프록시의 역할 : 클라이언트를 숨겨주는 역할 (서버쪽에선 클라이언트가 누구인지 식별 불가)
리버스 프록시 역할 : 
- 클라이언트는 서버의 존재를 모르고 리버스프록시(중계자)의 존재만 알게 됨. (서버를 숨겨주는 역할)
- 서버를 숨기니 트래픽 분산도 가능함. (부하분산, 로드밸런싱)

* 트래픽 분산이란?
대량의 클라이언트의 요청이 왔을 때 하나의 서버에서 요청을 처리하기엔 많은 시간이 소요되므로 여러 서버에서 요청을 나눠서 처리한다. 트래픽을 하기위해선 클라이언트가 여러 서버의 IP를 알아야 되기 때문에 리버스프록시(중계자)를 두고 하나의 IP로 요청을 보내면 리버스 프록시가 여러 서버에 요청을 뿌려준 뒤 응답을 받아 클라이언트에 넘겨준다.
(클라이언트) - (request) > (리버스프록시) - (request) > (서버1), (서버2), (서버3)

- 강의 내 많은 질문을 받은 내용 -
* 트래픽이 매우 많아져도 nginx만으로 충분한가??
아무리 서버의 개수가 많아져도(스케일아웃) nginx서버에서 처리할 수 있는 용량의 한계가 있기 때문에 충분하지않다.
- 해결방안
1. nginx의 서버를 더 좋은 성능의 서버로 교체.
2. nginx같은 소프트웨어가 아닌 하드웨어로 로드밸런싱 (ex : L4, L7 스위치 사용)
3. DNS를 Redirection 하는 방법.

* 롤링으로 배포하다가 배포에 실패하면 어떻게 하나??
배포에 실패한 원인은 배포가 진행중인 과정에서 바로 알기 어려울 때도 많다.
새로운 버전으로 배포된 서버를 이전으로 롤백시키고 배포가 실패한 원인을 찾아봐야 한다.
배포성공 여부 체크 존재가 있어야 한다.
 - 수동롤백 : 배포가 비교적 많지 않은 조직은 수동롤백도 괜찮다.
 - 자동롤백 : 배포가 잦은 조직은 자동롤백이 좋다.